{"version":3,"sources":["App.js","firebase.js","reportWebVitals.js","index.js"],"names":["initialize","App","database","fb","useState","operation","setOperation","result","setResult","executable","setExecutable","detectNewOperation","ref","on","snapshot","prevChildKey","updateHistory","enter","sendResult","eval","toFixed","toString","amount","checkAmount","position","path","set","event","off","orderByKey","limitToFirst","document","getElementById","innerHTML","forEach","childSnapshot","htmlElement","val","allClear","backspace","length","substring","addInput","e","id","target","Number","isInteger","parseInt","validateInput","style","borderColor","error","onChange","setTimeout","className","onClick","firebase","require","default","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.483cb1e8.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react'\nimport fb from './firebase.js'\nvar initialize = false;\n\nfunction App() {\n\n  // Initializing the database to ease referencing in the future.\n\n  let database = fb.database();\n\n  // Variable displayed on the top bar on the calculator's display, showing the operation.\n\n  const [operation, setOperation]= useState(\"\");\n\n  //  Variable displayed on the calculator's\n  //  bottom bar on the display, showing the result of the operation as well as any new input.\n\n  const [result, setResult] = useState(\"0\");\n\n  // Variable that determines if the operation gets executed based on the validity of the input\n\n  const [executable, setExecutable] = useState(true);\n\n  // Fill up  history, and initialize calculation count becuase of weird bug.\n  // It's inside of an  if statement so that it doesn't execute everytime a user\n  // presses on any button.\n\n  if(!initialize) {\n    detectNewOperation();\n    checkAmount();\n    initialize = true;\n  }\n\n  // This function detects when a user adds a new calculation\n\n  function detectNewOperation() {\n    database.ref(\"/\").on(\"child_added\", function(snapshot, prevChildKey) {\n        updateHistory();\n    });\n  }\n\n  // Function called when user clicks \"=\"\n\n  /*\n    Details:\n    - Only executes if the input is valid\n    - The results are fixed to 3 decimal places, to change, tweak the parameter on toFixed(x)\n    - The operation moves to the smaller line on top, and the result is displayed on the bigger line\n    - Since Firebase doesn't have ordering by timestamp, I decided to order by key, and making each calculation\n      have a unique key starting  from 0 to -Infinity.\n    - I chose negative numbers, because if I chose positive I would have had to store them in an array, and reverse it,\n      considering that the most recent would be at the bottom.\n    - I then update the count of calculations, which is also negative, which helps set the next calculation's key\n  */\n\n  function enter() {\n    if(executable) {\n      setOperation(result);\n      let sendResult = eval(result).toFixed(3).toString()\n      setResult(sendResult);\n\n      let amount = checkAmount();\n      let position = amount - 1;\n      let path = \"history/\" + position.toString();\n\n      database.ref(\"count\").set(--amount);\n      database.ref(path).set(result + \" = \" + sendResult );\n    }\n  }\n\n  // Update history\n\n  /*\n   Details:\n    - \"off()\" prevents old values from being used.\n    - Since I made the keys go from 0 to negative infinity, the most  recent calculation will have\n      the most negative number, so ordering by key will have a list descending in time. Limit by 10\n      gets the first 10.\n    - I empty the box containing the history, and refresh it with the new 10.\n  */\n\n  function updateHistory(event) {\n    database.ref(\"history/\").off()\n    database.ref(\"history/\").orderByKey().limitToFirst(10).on('value', function(snapshot) {\n      document.getElementById(\"history-block\").innerHTML = '';\n      snapshot.forEach(function(childSnapshot) {\n        let htmlElement = \"<div class=\\\"calculation\\\">\" + childSnapshot.val() + \"</div>\";\n        document.getElementById(\"history-block\").innerHTML += htmlElement;\n      })\n    })\n  }\n\n  // Counts how many calculations there are on the database\n\n  function checkAmount() {\n    var amount = 0;\n    database.ref(\"count\").on('value', function(snapshot) {\n      amount = snapshot.val();\n    })\n    return amount;\n  }\n\n  // Function called when user clicks \"AC\".\n\n  function allClear() {\n    setResult('0');\n    setOperation(\"\");\n  }\n\n  // Function called when user clicks \"DEL\", which deletes the last character of the input, unless it's only 0.\n\n  function backspace() {\n    if(result.length == 1) { setResult('0');  }\n    else { setResult(result.substring(0,result.length - 1)); }\n    setOperation(\"\");\n  }\n\n  // Function called when user clicks on any number, adding it to the input.\n  // If there is no input A.K.A \"0\", replace 0 instead of adding to it to avoid\n  // leading zeros.\n\n  // Also, given that eval() takes Integer + ( as an error, I automatically add a multiplication sign if a numbers\n  // precedes a parenthesis\n\n  function addInput(e) {\n    let id = e.target.id;\n    if(result == \"0\") { setResult(id); }\n    else {\n      if(id == \"(\" && Number.isInteger(parseInt(result.substring(result.length, result.length - 1)))) { setResult(result + \"*\" + id); }\n      else { setResult(result + id); }\n    }\n    setOperation(\"\")\n  }\n\n\n  // This function makes the top and bottom bars of the result display red or green, depending on the current input\n  // and whether it's an actual valid operation or not\n\n  // Invalid operations are the ones that finish in an operator.\n\n  function validateInput() {\n      try {\n        eval(result);\n        document.getElementById(\"resultParent\").style.borderColor = \"#E7FFE5\";\n        setExecutable(true);\n      }\n      catch(error) {\n        document.getElementById(\"resultParent\").style.borderColor = \"#FFE5E5\";\n        setExecutable(false);\n      }\n  }\n\n\n  return (\n    <>\n      <div id=\"navbar\">Simple Calculator</div>\n      <div id = \"content\">\n        <div id=\"calculator-side\">\n          <div id=\"resultParent\">\n            <div id=\"operation\">{operation}</div>\n            <div onChange={setTimeout(validateInput,1)} id=\"result\">{result}</div>\n          </div>\n          <div id=\"calculator\">\n            <div id=\"buttons\">\n              <button id=\"1\" className=\"button\" onClick={addInput}>1</button>\n              <button id=\"2\" className=\"button\" onClick={addInput}>2</button>\n              <button id=\"3\" className=\"button\" onClick={addInput}>3</button>\n              <button id=\"-\" className=\"button operator\" onClick={addInput}>-</button>\n              <button id=\"4\" className=\"button\" onClick={addInput}>4</button>\n              <button id=\"5\" className=\"button\" onClick={addInput}>5</button>\n              <button id=\"6\" className=\"button\" onClick={addInput}>6</button>\n              <button id=\"+\" className=\"button operator\" onClick={addInput}>+</button>\n              <button id=\"7\" className=\"button\" onClick={addInput}>7</button>\n              <button id=\"8\" className=\"button\" onClick={addInput}>8</button>\n              <button id=\"9\" className=\"button\" onClick={addInput}>9</button>\n              <button id=\"*\" className=\"button operator\" onClick={addInput}>*</button>\n              <button className=\"button\" onClick={allClear}>AC</button>\n              <button id=\"0\" className=\"button\" onClick={addInput}>0</button>\n              <button id=\".\" className=\"button\" onClick={addInput}>.</button>\n              <button id=\"/\" className=\"button operator\" onClick={addInput}>÷</button>\n              <button id=\"(\" className=\"button operator\" onClick={addInput}>(</button>\n              <button id=\")\" className=\"button operator\" onClick={addInput}>)</button>\n              <button className=\"button operator\" onClick={backspace}>DEL</button>\n              <button className=\"button special-key\" onClick={enter}>=</button>\n            </div>\n          </div>\n        </div>\n        <div id=\"history-side\">\n          <div id=\"history-block\">\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","var firebase = require(\"firebase/app\");\nrequire('firebase/database');\n\nvar firebaseConfig = {\n   apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n   authDomain: process.env.REACT_APP_AUTHDOMAIN,\n   projectId: process.env.REACT_APP_PROJECTID,\n   storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n   messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n   appId: process.env.REACT_APP_APPID\n };\n\n const fb = firebase.default.initializeApp(firebaseConfig);\n\n export default fb;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}